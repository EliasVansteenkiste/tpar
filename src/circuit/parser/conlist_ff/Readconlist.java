/* Generated By:JavaCC: Do not edit this line. Readconlist.java */
package circuit.parser.conlist_ff;

import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Vector;

import circuit.*;

public class Readconlist implements ReadconlistConstants {

  int K, L;
  Circuit circuit;
  Vector<String> sinks;
  Vector<String> sources;
//  Vector<String> groups;
  Map<String,Pin> sourcePinMap;
  Map<String,Pin> sinkPinMap;
  Map<String,Vector<Pin>> nonUniqueSinks;

  public Circuit read(int K, int L) throws ParseException, FileNotFoundException  {
    this.K = K;
    this.L = L;
    circuit = new Circuit();
    sources = new Vector<String>();
    sinks = new Vector<String>();
//    groups = new Vector<String>();
        sourcePinMap = new HashMap<String,Pin>();
        sinkPinMap = new HashMap<String,Pin>();
        nonUniqueSinks = new HashMap<String,Vector<Pin>>();

    Conlist();

        //Connect the connections with the pins/blocks
    for (String source_name:sources) {
                Pin source = sourcePinMap.get(source_name);
                if(source == null)
                        throw new RuntimeException("Undefined source: "+source_name);
        Connection con = new Connection(source,source);
        source.con=con;
    }

        //Connect the connections with the pins/blocks
    for (String sink_name:sinks) {
        Pin sink = sinkPinMap.get(sink_name);
                if(sink == null)
                        throw new RuntimeException("Undefined sink: "+sink_name);
                Connection con = new Connection(sink, sink);
                sink.con = con;
    }

        //Connect the connections with the pins/blocks
//	Boolean groupsInOK = false;
//	if(groups.size()==sources.size())groupsInOK = true;
//	else System.out.println("Not every connection has a group indicator");	  
    for (int i=0;i<sources.size();i++) {
                Pin source = sourcePinMap.get(sources.get(i));
        Pin sink = sinkPinMap.get(sinks.get(i));
        if(source==null)System.out.println("Error:source not connected");
        if(sink==null)System.out.println("Error:sink not connected");
                Connection con = new Connection(source, sink, sink);
                circuit.cons.add(con);
//		if(groupsInOK)con.group = Integer.valueOf(groups.get(i));
    }
    return circuit;

  }

  final public void Conlist() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case OUT:
      case CLB:
      case CON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Block();
    }
    jj_consume_token(0);
  }

  final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      Input();
      break;
    case OUT:
      Output();
      break;
    case CLB:
      Clb();
      break;
    case CON:
      Con();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Input() throws ParseException {
  Token name;
  Token out;
  Input in;
    jj_consume_token(IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      name = jj_consume_token(Id);
      break;
    case Idn:
      name = jj_consume_token(Idn);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PINLIST);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      out = jj_consume_token(Id);
      break;
    case OPEN:
      out = jj_consume_token(OPEN);
      break;
    case Idn:
      out = jj_consume_token(Idn);
      break;
    case IdnId:
      out = jj_consume_token(IdnId);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    //System.out.println("Input gevonden!");
    in = new Input(name.image);

    //Adding the input block
    if(!circuit.inputs.containsKey(in.name)) circuit.inputs.put(in.name,in);

        //Adding output pin to pinMap
        if(sinkPinMap.containsKey(out.image))System.out.println("Error while reading input block "+name.image+": sourcePinMap contains already a pin with name:"+out.image);
        sourcePinMap.put(out.image,in.output);
  }

  final public void Output() throws ParseException {
  Token name;
  Token in;
  Output out;
    jj_consume_token(OUT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      name = jj_consume_token(Id);
      break;
    case Idn:
      name = jj_consume_token(Idn);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PINLIST);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      in = jj_consume_token(Id);
      break;
    case OPEN:
      in = jj_consume_token(OPEN);
      break;
    case Idn:
      in = jj_consume_token(Idn);
      break;
    case IdnId:
      in = jj_consume_token(IdnId);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    //System.out.println("Output gevonden!");
    out = new Output(name.image);

    //Adding the output block.
    if(!circuit.outputs.containsKey(out.name)) circuit.outputs.put(out.name,out);

    //Adding input pin to pinMap
    if(sinkPinMap.containsKey(in.image)) System.out.println("Error while reading output block "+name.image+": sinkPinMap contains already a pin with name:"+in.image);
    sinkPinMap.put(in.image,out.input);
  }

  final public void Clb() throws ParseException {
  Token name;
  Token conId;
  Clb clb;
  int i;
    jj_consume_token(CLB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      name = jj_consume_token(Id);
      break;
    case Idn:
      name = jj_consume_token(Idn);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    clb = new Clb(name.image,L,K);
    //Adding the CLB.
    if(!circuit.clbs.containsKey(clb.name))
      circuit.clbs.put(clb.name,clb);
    jj_consume_token(PINLIST);
             i = 0;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN:
      case Id:
      case Idn:
      case IdnId:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        conId = jj_consume_token(Id);
        break;
      case Idn:
        conId = jj_consume_token(Idn);
        break;
      case OPEN:
        conId = jj_consume_token(OPEN);
        break;
      case IdnId:
        conId = jj_consume_token(IdnId);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        if (i<K) {
                if(conId.image!="open") {
                    if(sinkPinMap.containsKey(conId.image))System.out.println("Error while reading clb "+name.image+": sinkPinMap contains already a pin with name:"+conId.image);
                        sinkPinMap.put(conId.image,clb.input[i]);
        }
        } else if (i<K+L) {
                if(conId.image!="open") {
                    if(sourcePinMap.containsKey(conId.image))System.out.println("Error while reading clb "+name.image+": sourcePinMap contains already a pin with name:"+conId.image);
                        sourcePinMap.put(conId.image,clb.output[i-K]);
        }
        } else if (i==K+L) {
                if(conId.image!="open") {
                    if(sinkPinMap.containsKey(conId.image)){
                        System.out.println("Warning: while reading CLB "+name.image+": sinkPinMap contains already a pin with name:"+conId.image+", assuming clock network");
                        Vector<Pin> pins = nonUniqueSinks.get(conId.image);
                        if(pins==null){
                                pins = new Vector<Pin>();
                                        nonUniqueSinks.put(conId.image,pins);
                        }
                        pins.add(clb.clock);
                    }else{
                                sinkPinMap.put(conId.image,clb.clock);
                        }
        }
        } else {
                {if (true) throw new ParseException("Too many pins on clb: "+clb.name);}
        }
        i++;
    }
    label_3:
    while (true) {
      jj_consume_token(SUBBLOCK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
        jj_consume_token(Id);
        break;
      case Idn:
        jj_consume_token(Idn);
        break;
      case OPEN:
        jj_consume_token(OPEN);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          jj_consume_token(NUMBER);
          break;
        case OPEN:
          jj_consume_token(OPEN);
          break;
        case Id:
          jj_consume_token(Id);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN:
        case Id:
        case NUMBER:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBBLOCK:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
    }

  }

  final public void Con() throws ParseException {
  Token source,sink/*,group*/;
    jj_consume_token(CON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      source = jj_consume_token(Id);
      break;
    case Idn:
      source = jj_consume_token(Idn);
      break;
    case IdnId:
      source = jj_consume_token(IdnId);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      sink = jj_consume_token(Id);
      break;
    case Idn:
      sink = jj_consume_token(Idn);
      break;
    case IdnId:
      sink = jj_consume_token(IdnId);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          sources.add(source.image);
          sinks.add(sink.image);
  }

  /** Generated Token Manager. */
  public ReadconlistTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3c0,0x3c0,0x6000,0xf000,0x6000,0xf000,0x6000,0xf000,0xf000,0x7000,0x13000,0x13000,0x800,0xe000,0xe000,};
   }

  /** Constructor with InputStream. */
  public Readconlist(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Readconlist(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ReadconlistTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Readconlist(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ReadconlistTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Readconlist(ReadconlistTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ReadconlistTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
